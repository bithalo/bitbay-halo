<!DOCTYPE html>
<html>
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>BitBay Solidity</title>
</head>
<body>

<div id="Loaded"></div>
<p id="text1"></p>

<script type="text/javascript" src="./web3.min.js"></script>
<script type="text/javascript" src="./merkletree.js"></script>
<script type="text/javascript" src="./pubtoaddr.js"></script>
<script type="text/javascript" src="./BAYAdmin.js"></script>
<script type="text/javascript" src="./BAYData.js"></script>
<script type="text/javascript" src="./elliptic.min.js"></script>
<script type="text/javascript" src="./purify.js"></script>
<script type="text/javascript">
document.getElementById("Loaded").innerHTML = "Welcome to the BitBay bridge"
var web3 = [];
var contractAdmin = [];
var myTrees = {};
var addy = "";
var mypriv = "";
var myVotes = {};
var currentSupply = "";
var nonce = {};
var theroots = {};
var treedb = {}; //Python test

//First index is Goerli
//var mypairs = [['0xA563E960C3BD3EA13cF5eC3c55F925c9a1C1bDA6','0x566561B14eD45b3Ad4f0B864Bd10E43aA9bB4088','0xE349B271075B53062fde900657BDFB567cad6f92','0x10f5f17B0455bb8365Ed72471718e3E0a0984674']];
var mypairs = [[],[],[],[],[],[],[]]

//Useful for knowing the address before unlocking the wallet
function pubKeyToAddress(compressedPubkey) {
    var ec = new elliptic.ec('secp256k1');
    let keyPair = ec.keyFromPublic(compressedPubkey, 'hex')
    // remove '04' then add prefix '0x'
    let pubkey = '0x' + keyPair.getPublic(false, 'hex').substr(2)
    let address = trimFirst12Bytes(web3[0].utils.keccak256(pubkey))
    console.log(address)
    return web3[0].utils.toChecksumAddress(address)
}
function trimFirst12Bytes(hexString) {
    return '0x'.concat(hexString.substr(hexString.length - 40))
}

async function loadBridges(bridges, publickey) {
    web3 = [];
    contractAdmin = [];
    contractData = [];
    var foundthis;
    var prevdata;
    var web3temp;
    var contractAdmin2;
    var x = 0;
    var mytext = "";
    var text1 = "";
    var bal = 0;
    var y = 0;
    var admincontract;
    var returnvals = [];
    var checkthis = 0;
    var myresult;
    var proposal;
    var timest;
    var timelimit;
    var myblock;
    var MyAccount;

    var pegsteps;
    var microsteps;
    var supply2;
    var rate;
    var supply;
    var section;
    
    var intervaltime;
    var processingTime;
    var myleaves = [];    
    var tree;
    var mynonce;
    var thenode;
    var pos;
    var gasOptions;
    while(x < bridges.length) {
        y = 0;        
        while(y < bridges[x].l.length) {
            text1 = "";
            checkthis = 1;
            try {
                web3[x] = new Web3(bridges[x].l[y]);
                contractData[x] = new web3[x].eth.Contract(BAYDataAbi,bridges[x].c);
                await contractData[x].methods.minter().call().then(function (result) {
                    admincontract = DOMPurify.sanitize(result);
                });
                await contractData[x].methods.getState().call().then(function (result) {
                    returnvals[x] = JSON.parse(DOMPurify.sanitize(JSON.stringify(result)));
                });
                contractAdmin[x] = new web3[x].eth.Contract(BAYAdminAbi,admincontract);
                addy = pubKeyToAddress(publickey);
                bal = await checkbalance(x, addy);
                text1 = bridges[x].n + "<br>Address: " + addy + "<br>Balance: " + bal + "<br>";
                if(parseFloat(bal) < parseFloat(2)) {
                    checkthis = 0;
                    text1 += "Your balance is low for this network. Please increase it above 2 coins for managing the bridge.<br>"
                    text1 += "Bridge operations temporarily halted.<br>";
                }
                await contractAdmin[x].methods.isActive().call().then(function (result) {
                    if(parseInt(DOMPurify.sanitize(result)) > 1) {
                        checkthis = 0;
                        text1 += "This network is currently paused until: "+(parseInt(DOMPurify.sanitize(result))+1814400)+"(estimated timestamp)<br>";
                    }
                });
                myStartingNonce = 0;
                if(checkthis == 1) {
                    var gasPrice;
                    await web3[x].eth.getGasPrice().then(function (theGasPrice) {
                      gasPrice = window.web3.utils.toWei(parseInt(parseInt(DOMPurify.sanitize(theGasPrice)) * 1.5).toString(), 'wei');
                      if(parseInt(gasPrice) > 2500000000000) {
                        gasPrice = "2500000000000";
                      }
                    });
                    gasOptions = {
                      gasLimit: 9000000,
                      gasPrice: gasPrice
                    };
                    await contractAdmin[x].methods.isCurator(addy).call().then(function (result) {
                        myresult = DOMPurify.sanitize(result) == "true";
                    });
                    await contractAdmin[x].methods.startingNonce().call().then(function (mynonce2) {
                        myStartingNonce = DOMPurify.sanitize(mynonce2);
                    });
                    await contractAdmin[x].methods.merkleLen().call().then(async function (myX) {
                        returnvals[x]['lastMerkle'] = "0x0";
                        myX=parseInt(DOMPurify.sanitize(myX))
                        if(myX > 0) {
                            await contractAdmin[x].methods.Merkles(myX-1).call().then(function (lastMerkle) {
                                returnvals[x]['lastMerkle'] = DOMPurify.sanitize(lastMerkle);
                            });
                        }
                    });                    
                    myblock = DOMPurify.sanitize(await web3[x].eth.getBlock(await web3[x].eth.getBlockNumber()));
                    timest = parseInt(myblock.timestamp);
                    if(myresult == true) {
                        if(mypriv != "") {
                            myAccount = web3[x].eth.accounts.privateKeyToAccount(mypriv);
                            web3[x].eth.accounts.wallet.add(mypriv);
                            myAccount = myAccount.address;
                            try {
                                if(currentSupply != "") {
                                    pegsteps = parseInt(returnvals[x]['1']);
                                    microsteps = parseInt(returnvals[x]['2']);
                                    supply2 = parseInt(returnvals[x]['0']);
                                    rate = parseInt(1200 / (pegsteps * microsteps));
                                    supply = parseInt(currentSupply / rate);
                                    if(supply != supply2) {
                                        if(supply < supply2 && supply2 - supply > 10) {
                                            supply = supply2 - 10;
                                        }
                                        if(supply > supply2 && supply - supply2 > 10) {
                                            supply = supply2 + 10;
                                        }
                                        await contractAdmin[x].methods.myvotetimes(addy,7).call().then(function (result) {
                                            myresult = parseInt(DOMPurify.sanitize(result));
                                        });
                                        if(myresult < timest) {
                                            await contractAdmin[x].methods.votetimelimit(7).call().then(function (result) {
                                                timelimit = parseInt(DOMPurify.sanitize(result));
                                            });
                                            await contractAdmin[x].methods.startingtime(7).call().then(function (result) {
                                                myresult = parseInt(DOMPurify.sanitize(result));
                                            });                             
                                            if((timest < myresult + parseInt((timelimit * 15) / 10)) && (timest > myresult + timelimit)) {
                                                //There is a cooldown to make sure all users submit at similar times.
                                            } else { //We don't wait for confirmation, just submit the transaction
                                                contractAdmin[x].methods.setSupply(supply, mypairs[x]).send({"from":myAccount,...gasOptions});
                                                console.log("Voted on supply: ");
                                                console.log(supply);
                                            }
                                        }
                                    }
                                }
                            } catch (e) {
                                console.log(e);
                            }
                            try {
                                myresult = 1;
                                if(bridges[x].n in myVotes) {
                                    foundthis = 1;
                                    pos = 0;
                                    while(pos < bridges[x].l.length) { //Get multiple confirmations
                                        web3temp = new Web3(bridges[x].l[pos]);
                                        contractAdmin2 = new web3temp.eth.Contract(BAYAdminAbi,admincontract);
                                        await contractAdmin2.methods.MerkleConfirm(myVotes[bridges[x].n]['root']).call().then(function (result) {
                                            myresult = DOMPurify.sanitize(result);
                                            if(parseInt(result)==0) {
                                                foundthis = 0;
                                            }
                                            if(pos==0) {
                                                prevdata = myresult;
                                            } else {
                                                if(prevdata != myresult) {
                                                    foundthis = 0;
                                                }
                                            }
                                        });
                                        pos+=1;
                                    }
                                    if(foundthis == 0) {
                                        myresult = 2;
                                    }
                                }
                                if(parseInt(myresult) == 0) {
                                    //proposal = web3[x].utils.keccak256(web3[x].eth.abi.encodeParameters(['string','bytes32','uint256'],['addMerkle',myVotes[bridges[x].n]['root'],myVotes[bridges[x].n]['section']]));
                                    await contractAdmin[x].methods.myvotetimes(addy,9).call().then(function (result) {
                                        myresult = parseInt(DOMPurify.sanitize(result));
                                    });
                                    if(myresult < timest) {
                                        await contractAdmin[x].methods.votetimelimit(9).call().then(function (result) {
                                            timelimit = parseInt(DOMPurify.sanitize(result));
                                        });
                                        await contractAdmin[x].methods.startingtime(9).call().then(function (result) {
                                            myresult = parseInt(DOMPurify.sanitize(result));
                                        });                             
                                        if((timest < myresult + parseInt((timelimit * 15) / 10)) && (timest > myresult + timelimit)) {
                                            //There is a cooldown to make sure all users submit at similar times.
                                        } else { //We don't wait for confirmation, just submit the transaction
                                            var foundthis2 = 1;
                                            await contractAdmin[x].methods.MerkleConfirm(myVotes[bridges[x].n]['root']).call().then(function (resultM) {
                                                if(parseInt(DOMPurify.sanitize(resultM))==0) {
                                                    foundthis2 = 0;
                                                }
                                            });
                                            if(foundthis2 == 0){
                                                contractAdmin[x].methods.addMerkle(myVotes[bridges[x].n]['root'],myVotes[bridges[x].n]['section']).send({"from":myAccount,...gasOptions});
                                                console.log("Voted on merkle: ");
                                                console.log(myVotes[bridges[x].n]['root']);
                                            }
                                        }
                                    }
                                } else {
                                    if(parseInt(myresult) != 2) {
                                        if(bridges[x].n in myVotes) {
                                            myVotes[bridges[x].n]['confirmed'] = 1
                                        }
                                    }
                                }
                                //Here we will check to change supply
                            } catch (e) {
                                console.log(e);
                            }
                        }
                    } else {
                        text1 += "You are not a curator for this network.<br>"
                    }
                    //Check merkles for python test pseudocode
                    if(bridges[x].n in nonce) {
                        if(bridges[x].n in treedb) {                            
                        } else {
                            treedb[bridges[x].n] = {}
                        }
                        try {
                            mynonce = nonce[bridges[x].n];
                            if(mynonce in treedb[bridges[x].n]) {                                
                            } else {
                                await contractAdmin[x].methods.processingTime(parseInt(mynonce)+parseInt(myStartingNonce)).call().then(function (myresults) {
                                    processingTime = DOMPurify.sanitize(myresults);
                                });
                                if (parseInt(processingTime) > 0) {
                                    await contractAdmin[x].methods.intervaltime().call().then(function (myresults) {
                                        intervaltime = DOMPurify.sanitize(myresults);
                                    });
                                    if ((parseInt(processingTime) + parseInt(intervaltime) + parseInt(intervaltime)) < parseInt(timest)) {
                                        console.log('Processing merkle')
                                        foundthis = 1;
                                        pos = 0;
                                        while(pos < bridges[x].l.length) { //Get multiple confirmations
                                            web3temp = new Web3(bridges[x].l[pos]);
                                            contractAdmin2 = new web3temp.eth.Contract(BAYAdminAbi,admincontract);
                                            await contractAdmin2.methods.listHashes(parseInt(mynonce)+parseInt(myStartingNonce)).call().then(function (myresults) {
                                                myleaves = JSON.parse(DOMPurify.sanitize(JSON.stringify(myresults)));
                                                if(pos==0) {
                                                    prevdata = myleaves;
                                                } else {
                                                    if(prevdata != myleaves) {
                                                        foundthis = 0;
                                                    }
                                                }
                                            });
                                            pos+=1;
                                        }
                                        if(foundthis == 1) {
                                            tree = new MerkleTree(myleaves, web3[x].utils.keccak256, { sort: true });
                                            treedb[bridges[x].n][mynonce] = tree;
                                            theroots[bridges[x].n] = [mynonce, tree.getHexRoot()];
                                            console.log(tree.getHexRoot())
                                        }
                                    } else {
                                        //Merkle Proof: This tree is not processed yet. Please check again later.";
                                    }
                                } else {
                                    //Tree doesn't exist yet, no transactions. We can tell it to stop voting.
                                    theroots[bridges[x].n] = [mynonce, 0];
                                }
                            }
                        } catch (e) {
                            console.log(e);
                        }
                    }
                }
                text1 += "<br>"
            } catch (e){
                //web3[x] = 0;
                //contractAdmin[x] = 0;
                //contractData[x] = 0;
                returnvals[x] = 0;
                text1 = "Error loading " + bridges[x].n;
                y += 1;
                continue;
            }
            break;
        }
        mytext += text1;
        x += 1;
    }
    var returnvals2 = [];
    returnvals2[0] = returnvals;
    returnvals2[1] = mytext;
    return returnvals2;
}

async function checkbalance(mypos, myaddy) {
    var ETHBalance = 0;
    await web3[mypos].eth.getBalance(myaddy, function(err, result2) {
        if (err) {
            ETHBalance = err;
        } else {
            ETHBalance = web3[mypos].utils.fromWei(DOMPurify.sanitize(result2), "ether");
        }
    });
    return ETHBalance;
}

function sendVotes(votes, privkey) {
    mypriv = privkey;
    myVotes = votes; //Network Name: {root: hash, section: section}...
    return true;
}

function updateSupply(mysupply, privkey, pairs) {
    mypriv = privkey;
    currentSupply = mysupply; //Network Name: {root: hash, section: section}...
    mypairs = pairs;
    return true;
}

function updateNonce(mynonce2) {
    nonce = mynonce2;
}

function getRoots() {
    return theroots;
}

function getVotes() {
    conf = 0;
    for(bridge in myVotes) {
        conf = 1;
        if('confirmed' in myVotes[bridge]) {
        } else {
            return false;
        }
    }
    if(conf == 1) {
        myVotes = {}
        return true;
    }
    return false;
}

function getKeccakLeaves(myleaves) {
    i = 0;
    while(i < myleaves.length) {
        try { //In testnet 38 is the value used but different bridges in production can vary
            myleaves[i]=web3[0].utils.keccak256(web3[0].eth.abi.encodeParameters(['address','uint256[38]','string'],myleaves[i]));
            i++;
        } catch (error) {
            myleaves.splice(i, 1);
        }
    }
    return myleaves
}
function getLeaf(thedata, totalsteps) { //totalsteps is pegsteps + microsteps for that network
    return web3[0].utils.keccak256(web3[0].eth.abi.encodeParameters(['address','uint256['+totalsteps+']','string'],thedata));//[to,array,txid]
}
function createMerkle(leaves) {
    //var array = [7777777777,999977777,0,5555555555,100000000,10000000,10000000,10000000,10000000,10000000,1000000,100000,100000,10000,10000,10000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,100,100,77777777,88888888,55555555,99999999,77777999,100000000,1500000,7500000];
    //txid = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5:1";
    //msgsend = "0x421F972E44091f3f33f58430A311Adc6D3199E11";
    //test = web3[0].eth.abi.encodeParameters(['address','uint256[38]','string'],[msgsend,array,txid]);
    //txid = "7774471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173c12345:7";
    //msgsend = "0x83Fc607B88486B8607E35cB997B1c67776EfAAdF";
    //test1 = web3[0].eth.abi.encodeParameters(['address','uint256[38]','string'],[msgsend,array,txid]);
    //txid = "8884471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173c55555:8";
    //msgsend = "0x016EDc5C6DB7F13906d6E46F0527a69d170CaC35";
    //test2 = web3[0].eth.abi.encodeParameters(['address','uint256[38]','string'],[msgsend,array,txid]);
    //txid = "9994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173c55777:7";
    //msgsend = "0xB6780D50bC660E0efc42b18A458fA8C8bc2802Cc";
    //test3 = web3[0].eth.abi.encodeParameters(['address','uint256[38]','string'],[msgsend,array,txid]);
    //txid = "5554471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173c55555:5";
    //msgsend = "0x1E449f6cFFE85011a10552B265234C40c61F87D3";
    //test4 = web3[0].eth.abi.encodeParameters(['address','uint256[38]','string'],[msgsend,array,txid]);
    //txid = "4444471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173c44444:4";
    //msgsend = "0xc71F9ddf5a1436BF11a1DADB20644357C28EcB63";
    //test5 = web3[0].eth.abi.encodeParameters(['address','uint256[38]','string'],[msgsend,array,txid]);
    //txid = "1111171abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173c44477:1";
    //msgsend = "0x17b8646e20F444ecDD5cef1f1fDC5F95c30f1946";
    //test6 = web3[0].eth.abi.encodeParameters(['address','uint256[38]','string'],[msgsend,array,txid]);
    //leaves = [test, test1, test2, test3, test4, test5, test6].map(x => web3[0].utils.keccak256(x))

    var tree = new MerkleTree(leaves, web3[0].utils.keccak256, { sort: true });
    var root = "0x" + tree.getRoot().toString('hex');
    //console.log(root)
    
    //leaf = web3[0].utils.keccak256(test6)
    //proof = tree.getProof(leaf)
    //console.log(tree.verify(proof, leaf, root)) // true
    //console.log(tree.toString())
    //console.log(tree.getHexProof(leaf))
    //console.log(leaf)
    //console.log(tree)
    //console.log(leaves)
    myTrees[root] = tree;
    return root;
}
function verifymint(myproof, totalsteps2) {
    var myres;
    var myleaf;
    myleaf = web3[0].utils.keccak256(web3[0].eth.abi.encodeParameters(['string','uint256[' + totalsteps2 + ']','uint256','uint256','address'],[myproof['a'],myproof['r'],myproof['s'],myproof['n'],myproof['f']]));
    myres=treedb[myproof['w']][myproof['n']].verify(myproof['p'], myleaf, myproof['t']);
    return myres
}

function showProof(myroot,leaf) {
    proof = myTrees[myroot].getHexProof(leaf);
    return proof;
}
function showRoot(mytree) {
    return mytree.getRoot().toString('hex');
}
</script>
</body>
</html>